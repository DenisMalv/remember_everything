{"version":3,"file":"static/js/961.42e62e03.chunk.js","mappings":"wQAEeA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,+GAE2BC,EAAAA,EAAAA,IAAA,oGAF3B,uBAEYC,EAFZ,EAEYA,KAFZ,kBAKWA,GALX,gCAOIC,QAAQC,IAAR,MAPJ,yFAWeC,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,8HAEQC,EAAS,CACbA,OAAQ,CACNC,QAAS,mCACTC,SAAS,QACTH,MAAOA,EACPI,KAAM,IAPZ,SAWyBT,EAAAA,EAAAA,IAXzB,6CAW+CM,GAX/C,uBAWUL,EAXV,EAWUA,KAXV,kBAYSA,GAZT,2EAeeS,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCC,GAAjC,8FAA0CC,EAA1C,+BAAiD,GAAjD,kBAE2BZ,EAAAA,EAAAA,IAAA,6CACiBW,GADjB,OAEnBC,EAAO,IAAMA,EAAO,GAFD,6DAF3B,uBAEYX,EAFZ,EAEYA,KAFZ,kBAOWA,GAPX,gCASIC,QAAQC,IAAR,MATJ,iF,sFCQA,UA/BqB,WAAO,IAAD,UACjBG,GAASO,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MACjB,GAAyBC,EAAAA,EAAAA,UAAS,MAAlC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgBF,EAAAA,EAAAA,WAAiB,OAARF,QAAQ,IAARA,GAAA,UAAAA,EAAUK,aAAV,eAAiBd,QAAS,IAA5CA,GAAP,eACA,GAAeW,EAAAA,EAAAA,WAAiB,OAARF,QAAQ,IAARA,GAAA,UAAAA,EAAUK,aAAV,eAAiBC,OAAQ,IAA1CA,GAAP,eAQA,OANAC,EAAAA,EAAAA,YAAU,YAENX,EAAAA,EAAAA,IAAkBJ,EAAOK,SAASW,MAAK,SAACrB,GAAD,OAAQiB,EAASjB,EAAjB,GAE1C,GAAC,CAACK,EAAOK,UAGNM,IAAS,4BACL,SAAC,KAAD,CAAMM,GAAY,OAART,QAAQ,IAARA,GAAA,UAAAA,EAAUK,aAAV,SAAiBC,KAAjB,qBAA8BN,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAUK,aAAxC,aAA8B,EAAiBK,YAA/C,QAAuD,WAAYL,MAAO,CAACd,MAAMA,EAAOe,KAAKA,GAAvG,sBACA,mCACA,4BACI,gBAAKK,IAAG,0CAAqCR,EAAMS,aAAeC,IAAI,MACtE,wBAAKV,EAAMW,SACX,uBAAIX,EAAMY,eAEd,SAAC,KAAD,CAASN,GAAG,OAAOJ,MAAO,CAAEK,KAAK,WAAD,OAAaP,EAAMa,IAAMzB,MAAMA,GAA/D,oBACA,SAAC,KAAD,CAASkB,GAAG,UAAUJ,MAAO,CAAEK,KAAK,WAAD,OAAaP,EAAMa,IAAMzB,MAAMA,GAAlE,sBACA,SAAC,EAAA0B,SAAD,CAAUC,UAAU,uDAApB,UACI,SAAC,KAAD,QAIf,C","sources":["API/fetches.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nasync function fetchTrandingMovies() {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=6dae1a863e182d2e5c972909bcd1e575&&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchMovie(query) {\n  const SEARCH_URL = `https://api.themoviedb.org/3/search/movie?`;\n  const params = {\n    params: {\n      api_key: '6dae1a863e182d2e5c972909bcd1e575',\n      language: `en-US`,\n      query: query,\n      page: 1,\n    },\n  };\n\n  const { data } = await axios.get(SEARCH_URL, params);\n  return data;\n}\n\nasync function fetchMovieDetails(movieId, type = '') {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}${\n        type ? '/' + type : ''\n      }?api_key=6dae1a863e182d2e5c972909bcd1e575&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport { fetchTrandingMovies, fetchMovie, fetchMovieDetails };","\nimport { Suspense, useEffect, useState } from \"react\";\nimport { fetchMovieDetails } from \"API/fetches\";\nimport { Link, NavLink, Outlet, useLocation, useParams } from \"react-router-dom\";\n\nconst MovieDetails = () => {\n    const params = useParams()\n    const location = useLocation();\n    const [movie,setMovie] = useState(null)\n    const [query] = useState(location?.state?.query || '')\n    const [home] = useState(location?.state?.home || '')\n\n    useEffect(()=>{\n\n        fetchMovieDetails(params.movieId).then((data)=>setMovie(data))\n\n    },[params.movieId])\n    \n    return (\n        movie && <div>\n            <Link to={location?.state?.home ? `/` : location?.state?.from ?? '/movies/'} state={{query:query, home:home}}>go back</Link>\n            <h2>Movie</h2>\n            <div>\n                <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt=\"\" />\n                <h3>{movie.title}</h3>\n                <p>{movie.overview}</p>\n            </div>\n            <NavLink to='cast' state={{ from: `/movies/${movie.id}`, query:query}}>Casts</NavLink>\n            <NavLink to='reviews' state={{ from: `/movies/${movie.id}`, query:query}}>Reviews</NavLink>\n            <Suspense fallback={<div>Loading..Casts or Reviews</div>}>\n                <Outlet/>\n            </Suspense>\n        </div>\n    )\n}\n\nexport default MovieDetails"],"names":["fetchTrandingMovies","axios","data","console","log","fetchMovie","query","params","api_key","language","page","fetchMovieDetails","movieId","type","useParams","location","useLocation","useState","movie","setMovie","state","home","useEffect","then","to","from","src","poster_path","alt","title","overview","id","Suspense","fallback"],"sourceRoot":""}